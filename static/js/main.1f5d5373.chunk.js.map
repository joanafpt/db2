{"version":3,"sources":["services/apiService.js","components/Search.js","components/CompleteSearch.js","App.js","serviceWorker.js","index.js"],"names":["apiRoot","apiCalls","completeList","callback","axiosRetry","axios","retries","get","then","response","console","log","data","findWineByProducer","producer","url","encodeURIComponent","Array","isArray","findWineByName","wineName","findWineByQuality","wineQuality","catch","error","Search","state","resultList","propertyValueToSearch","onChange","event","setState","target","value","inputIsFilled","completeCallback","findWineByProperty","apiService","props","apiCall","resetTest","checkTypeOfOutput","output","className","length","map","elem","i","key","this","label","type","name","placeholder","id","onClick","Component","CompleteSearch","list","callCompleteListFromApi","callBackFunction","resetCompleteList","React","App","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f5d5373.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\nconst apiRoot = \"https://bdv.glitch.me/api/wines\";\r\n\r\nconst completeList = (callback) => {\r\n    axiosRetry(axios, { retries: 3 });\r\n    axios.get(apiRoot + '/get-full-list?fulllist=Enviar')\r\n        .then(response => {\r\n            console.log(response.data);\r\n            if (callback) {\r\n                callback(response.data);\r\n            }\r\n        })\r\n}\r\n\r\nconst findWineByProducer = (producer, callback) => {\r\n    const query = '?prod=';\r\n    const url = apiRoot + '/list-by-producer/' + query + encodeURIComponent(producer);\r\n    axiosRetry(axios, { retries: 3 });\r\n    axios.get(url)\r\n        .then(response => {\r\n            if (typeof response.data === 'string') { console.log('Produtor inventado'); }\r\n            else if (typeof Array.isArray(response.data)) { console.log('Produtor existe'); }\r\n            if (callback) {\r\n                callback(response.data);\r\n            }\r\n        })\r\n\r\n}\r\n\r\nconst findWineByName = (wineName, callback) => {\r\n    const name = wineName;\r\n    const query = '?wname=';\r\n    const url = apiRoot + '/find-a-wine/' + query + encodeURIComponent(name);\r\n    axiosRetry(axios, { retries: 3 });\r\n    axios.get(url)\r\n        .then(response => {\r\n            console.log(response.data);\r\n            if (callback) {\r\n                callback(response.data);\r\n            }\r\n        })\r\n}\r\n\r\nconst findWineByQuality = (wineQuality, callback) => {\r\n    const quality = wineQuality;\r\n    const query = '?qual=';\r\n    const url = apiRoot + '/list-by-type-of-wine/' + query + encodeURIComponent(quality);\r\n    console.log(url);\r\n    axiosRetry(axios, { retries: 10});\r\n    axios.get(url)\r\n        .then(response => {\r\n            console.log(response.data)\r\n            if (callback) {\r\n                callback(response.data);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n            callback(\"Por favor aguarde enquanto processamos o pedido.\");\r\n\r\n        })\r\n\r\n}\r\n\r\n\r\nconst apiCalls = {\r\n    completeList: completeList,\r\n    findWineByProducer: findWineByProducer,\r\n    findWineByName: findWineByName,\r\n    findWineByQuality: findWineByQuality,\r\n\r\n}\r\nexport default apiCalls;","import React, { Component } from 'react';\r\nimport apiService from \"../services/apiService\";\r\nimport './Search.css';\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        resultList: [],\r\n        propertyValueToSearch: \"\",\r\n    }\r\n\r\n    onChange = (event) => {   //grab the name using e.target\r\n        this.setState({\r\n            propertyValueToSearch: event.target.value,\r\n            inputIsFilled: true,\r\n        });\r\n    }\r\n\r\n    completeCallback = (data) => {\r\n        this.setState({\r\n            resultList: data\r\n        })\r\n    }\r\n\r\n    findWineByProperty = () => {\r\n        apiService[this.props.apiCall](this.state.propertyValueToSearch, this.completeCallback);\r\n        //  console.log(this.state.propertyValueToSearch.length, 'propertyValueToSearch.length ')\r\n    }\r\n\r\n    resetTest = () => {\r\n        this.setState({\r\n            resultList: [],\r\n            propertyValueToSearch: '',\r\n\r\n        })\r\n    }\r\n\r\n    checkTypeOfOutput = (output) => {\r\n\r\n        if (typeof output === 'string') {\r\n            return <div className=\"no-way\"> {output} </div>;\r\n\r\n        }\r\n        else {\r\n            return output.length > 0 ?\r\n                output.map(function (elem, i) {\r\n\r\n                    return (\r\n                        <div className=\"yes-way\"> <ul key={i}>\r\n                            {'ID: ' + elem['_id']} <br />\r\n                            {'Vinho ou  Marca: ' + elem['Vinho ou Marca']}<br />\r\n                            {'Produtor: ' + elem['Produtor']}<br />\r\n                            {'Qualidade: ' + elem['Qualidade']}</ul>\r\n                        </div>\r\n                    );\r\n                }) : null;\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n\r\n\r\n\r\n                <div className=\"controls \">\r\n                    <label>{this.props.label}</label>\r\n                    <br />\r\n                    <div className=\"form-group  \">\r\n\r\n\r\n                    <input className=\"form-control\"\r\n                        type=\"text\" name=\"prod\"\r\n                        onChange={this.onChange}\r\n                        value={this.state.propertyValueToSearch}\r\n                        placeholder=\"Pesquisar\" />\r\n\r\n</div>\r\n                    <br />\r\n                    <button type=\"submit\" id=\"submit\"\r\n                        className=\"btn btn-primary mt-2 mr-2  mb-2 ml-2\"\r\n                        onClick={this.findWineByProperty}>Enviar</button>\r\n                    <button type=\"reset\" id=\"reset\"\r\n                        className=\"btn btn-danger mt-2 ml-2  mb-2 ml-2\"\r\n                        onClick={this.resetTest}>Reset</button>\r\n                </div>\r\n                \r\n\r\n                <div id=\"preview\">\r\n\r\n                    {this.state.propertyValueToSearch.length === 0 ?\r\n                        <div className=\"no-way\">\r\n                            Por favor preencha o campo acima para validar\r\n                            se o vinho que procura está registado.\r\n                          </div>\r\n                        :\r\n                        <div className=\"yes-way\">\r\n                            {\r\n                                this.checkTypeOfOutput(this.state.resultList)}</div>\r\n                   \r\n                   }\r\n\r\n                </div>\r\n          \r\n          \r\n             \r\n          \r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\nexport default Search;","import React from 'react';\r\nimport apiService from \"../services/apiService\";\r\nimport './CompleteSearch.css';\r\n\r\nclass CompleteSearch extends React.Component {\r\n    state = {\r\n        list: [],\r\n    }\r\n\r\n    callCompleteListFromApi = () => {\r\n        const completeList = apiService[this.props.apiCall];\r\n        completeList(this.callBackFunction);\r\n\r\n    }\r\n\r\n    callBackFunction = (data) => {\r\n        this.setState({\r\n            list: data,\r\n        })\r\n    }\r\n\r\n    resetCompleteList = () => {\r\n        this.setState({\r\n            list: [],\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                   <div className=\"controls-01\" >\r\n                    <label id=\"label-complete\" > {this.props.label} </label><br />\r\n                    <button type=\"submit\" id=\"submit\"\r\n                        className=\"btn btn-primary mt-2 mr-2 mb-2 ml-2\"\r\n                        name=\"fulllist\"\r\n                        onClick={this.callCompleteListFromApi} > Enviar </button> <button type=\"submit\"\r\n                            className=\"btn btn-danger mt-2 ml-2 mb-2 ml-2\" id=\"reset\"\r\n                            name=\"fulllist\"\r\n                            onClick={this.resetCompleteList} > Reset </button> <br />\r\n                </div>\r\n                <div id=\"preview-cs\">\r\n                    {\r\n\r\n                        this.state.list.length === 0 ?\r\n                            <div className=\"no-way-cs\">\r\n                                A lista completa dos vinhos aparecerá aqui.\r\n                            </div>\r\n                            : this.state.list.map(function (elem, i) {\r\n                                return (\r\n                                    <div className=\"yes-way-cs\">\r\n                                        <ul key={i}>\r\n                                            {'ID: ' + elem['_id']} <br />\r\n                                            {'Vinho ou  Marca: ' + elem['Vinho ou Marca']}<br />\r\n                                            {'Produtor: ' + elem['Produtor']}<br />\r\n                                            {'Qualidade: ' + elem['Qualidade']}<br />\r\n                                        </ul></div>);\r\n                            })\r\n                    }\r\n\r\n                </div> <br />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CompleteSearch;","import React from 'react';\nimport './App.css';\nimport Search from \"./components/Search\";\nimport CompleteSearch from \"./components/CompleteSearch\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n      <div class=\"container\">\n        <div id=\"teste\">Repositório <br /> de Vinhos Vegan</div>\n        <div id=\"welcome\">\n          Bem-vindo/a!<br /><br />\n          Pode efetuar a sua pesquisa através dos critérios Produtor, Nome / Marca ou Qualidade.\n          Também pode obter a lista completa de vinhos registados na base de dados.\n        </div>\n\n      <div className=\"row\"> \n\n      <div className=\"col-sm\"> \n        <div className=\"square\">\n          <Search label=\"Por produtor\" apiCall=\"findWineByProducer\" />\n        </div>\n        </div>\n        <div className=\"col-sm\"> \n        <div className=\"square\">\n          <Search label=\"Por marca\" apiCall=\"findWineByName\" />\n        </div>\n        </div>\n        <div className=\"col-sm\"> \n        <div className=\"square\">\n          <Search label=\"Por qualidade\" apiCall=\"findWineByQuality\" />\n        </div>\n        </div>\n        <div className=\"col-sm\"> \n        <div className=\"square-01\">\n          <CompleteSearch label=\"Lista completa\" apiCall=\"completeList\" />\n        </div>\n        </div>\n\n\n        </div> {/*row*/}\n\n\n      </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}